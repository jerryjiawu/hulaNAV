# -*- coding: utf-8 -*-

from .pypack.fylo.controlserver import Controlserver, ConnectType

import os
 
# Get the absolute path of the current file
current_file_path = os.path.abspath(__file__)

path_text= os.path.dirname(current_file_path)
new_path = os.path.join(path_text, 'f09-lite-trans;')
# # Get the current PATH environment variable
current_path = os.environ.get('PATH', '')

# # Add the new folder path to PATH
new_path_s = f"{new_path}:{current_path}"

# # Update the environment variable
os.environ['PATH'] = new_path_s

class UserApi:
    def __init__(self):
        self._control_server = Controlserver()

#=============================================System Config======================================================================#

    def connect(self, server_ip = None):
        '''
            Description:
            The upper computer acts as a server,
            Parameters:
            Optional: server_ip: UAV IPv4 address, auto-detect if not provided
            Return value:
            True: success, False: failure
        '''
        return self._control_server.connect(server_ip)

    # scratch
    def single_fly_takeoff(self, led = 0):
        '''
            Description:
            Real-time control for UAV takeoff
            Parameters: led defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
         '''
        return	self._control_server.single_fly_takeoff(led)
    
    def single_fly_touchdown(self, led = 0):
        '''
            Description:
            Real-time control for UAV landing
            Parameters: led defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_touchdown(led)
    
    def single_fly_forward(self, distance, led = 0):
        '''
            Description:
            Real-time control for UAV flying forward
            Parameters:
            distance: flight distance (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_forward(distance, led)
    
    def single_fly_back(self, distance, led = 0):
        '''
            Description:
            Real-time control for UAV flying backward
            Parameters:
            distance: flight distance (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_back( distance, led)
    
    def single_fly_left(self,  distance, led = 0):
        '''
            Description:
            Real-time control for UAV flying left
            Parameters:
            distance: flight distance (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_left( distance ,led)
    
    def single_fly_right(self, distance, led = 0):
        '''
            Description:
            Real-time control for UAV flying right
            Parameters:
            distance: flight distance (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_right( distance, led)

    def single_fly_up(self,  height, led = 0):
        '''
            Description:
            Real-time control for UAV flying up
            Parameters:
            height: flight height (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_up(height, led)
        
    def single_fly_down(self, height, led = 0):
        '''
            Description:
            Real-time control for UAV flying down
            Parameters:
            height: flight height (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_down( height, led)
        
    def single_fly_turnleft(self, angle, led = 0):
        '''
            Description:
            Real-time control for UAV turning left
            Parameters:
            angle: rotation angle (degrees)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_turnleft( angle, led)
        
    def single_fly_turnright(self,  angle, led = 0):
        '''
            Description:
            Real-time control for UAV turning right
            Parameters:
            angle: rotation angle (degrees)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_turnright(-angle, led)

    def single_fly_bounce(self, frequency, height, led = 0):
        '''
            Description:
            Real-time control for UAV bouncing
            Parameters:
            frequency: number of bounces
            height: bounce height (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        self._control_server.single_fly_bounce(frequency, height, led)

    def single_fly_straight_flight(self, x, y, z, led = 0):
        '''
            Description:
            Straight flight (x, y, z)
            Parameters:
            x: coordinate x (cm)
            y: coordinate y (cm)
            z: coordinate z (cm)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_straight_flight( x, y, z, led)

    def single_fly_radius_around(self, radius, led = 0):
        '''
            Description:
            Circular flight with radius
            Parameters:
            radius: circle radius (cm, positive: counterclockwise, negative: clockwise)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_radius_around(radius, led)
    def single_fly_autogyration360(self, num, led = 0):
        '''
            Description:
            Spin clockwise/counterclockwise for a number of turns
            Parameters:
            num: (positive: counterclockwise, negative: clockwise)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_autogyration360(num, led)
    def	single_fly_somersault(self, direction, led = 0):
        '''
            Description:
            UAV somersault in place (forward, backward, left, right)
            Parameters:
                DIRECTION_FORWARD=0, /* forward. | */
                DIRECTION_BACK=1, /* back. | */
                DIRECTION_LEFT=2, /* left. | */
                DIRECTION_RIGHT=3, /* right. | */
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
       
        '''
        return self._control_server.single_fly_somersault(direction, led)
    def single_fly_curvilinearFlight(self, x, y, z, direction = True, led = 0):
        '''
            Description:
            Curvilinear flight (x, y, z)
            Parameters:
            x: x-axis coordinate (cm) (body left/right, right is positive)
            y: y-axis coordinate (cm) (body forward/backward, forward is positive)
            z: z-axis coordinate (cm) (body up/down, up is positive)
            direction: True: counterclockwise, False: clockwise, default True
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_curvilinearFlight(direction, x, y, z, led)
    
    def single_fly_hover_flight(self, time, led = 0):
        '''
            Description:
            UAV hover
            Parameters:
            time: hover time (seconds)
            led: defaults to 0 if not provided, format: {'r':0,'g':0,'b':0,'mode':1}  r,g,b: color, mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
        '''
        return self._control_server.single_fly_hover_flight(time, led)
    
    def single_fly_barrier_aircraft(self, mode ):
        '''
            Description:
            Enable/disable obstacle avoidance
            Parameters:
            mode: True: enable, False: disable
            
        '''
        return self._control_server.single_fly_barrier_aircraft(mode)
    
    def single_fly_Line_walking(self,fun_id , dist, way_color):
        '''
            Description:
            Line following detection
            Parameters:
            fun_id  = 0  //0: forward line following, ignore intersections  
            dist          //distance, unit: cm
            way_color   //line color, 0-black, 255-white
            Return:
            return result = 1; //command execution result: 0-fail, 1-success, 2-success with intersection

        '''	
        return self._control_server.single_fly_Line_walking(fun_id, dist, 0, way_color)
    def single_fly_AiIdentifies(self,mode):
        '''
            Description:
            Recognize tags
            Parameters:
            mode: 0-9 recognize number tags 0-9, 10 left arrow, 11 right arrow, 12 up arrow, 13 down arrow, 20 end task, 65-90 uppercase letters A-Z; recognition lasts 300ms, ends immediately if successful
            Return:
             x; X coordinate of tag card relative to UAV
             y; Y coordinate of tag card relative to UAV
             z; Z coordinate of tag card relative to UAV
            angle; Angle of tag card relative to UAV
            result; //False: recognition failed, True: recognition succeeded

        '''
        return self._control_server.single_fly_AiIdentifies(mode)
    

    # def single_fly_Qrcode_align(self, mode, qr_id):
    # 	'''
    # 		Description:
    # 		Optical flow/front camera QR code alignment
    # 		Parameters:
    # 		qr_id: QR code id [0-9],
    #         mode:  mode = 0 optical flow alignment, mode = 1 front camera alignment 
    # 		Return:
    # 		result; //False: recognition failed, True: recognition succeeded

    # 	'''
    # 	if mode == 0:
    # 		return self._control_server.single_fly_Qrcode_align(1, 5, 0, qr_id)
    # 	return self._control_server.single_fly_Qrcode_tracking(qr_id, 3, 0)
    
    def single_fly_Optical_flow_alignment(self, qr_id, qr_size, angle = 0):
        '''
            Description:
            Optical flow QR code alignment
            Parameters:
            qr_id: QR code id [0-9],
            qr_size: physical size of QR code, range [6, 30], default 20, unit: cm
            angle: align QR code and rotate n degrees
            Return:
            result; //False: recognition failed, True: recognition succeeded
        '''
        return self._control_server.single_fly_Qrcode_align(3, 5, 1, qr_id ,qr_size, angle)
    def single_fly_Optical_flow_recognition(self, qr_id, qr_size):
        '''
            Description:
            Optical flow QR code recognition
            Parameters:
            qr_id: QR code id [0-9],
            qr_size: physical size of QR code, range [6, 30], default 20, unit: cm
            Return:
            {
            result; //False: recognition failed, True: recognition succeeded
            x; distance between UAV and QR code
            y; distance between UAV and QR code
            z; distance between UAV and QR code
            yaw; angle between UAV and QR code
            qr_id; recognized QR code id
            }
        '''
        return 	self._control_server.single_fly_Qrcode_align(2, 5, 1, qr_id ,qr_size, 0)
    
    def single_fly_Anticipatory_recognition(self, qr_id):
        '''
            Description:
            Front camera QR code recognition
            Parameters:
            qr_id: QR code id [0-9]
            Return:
            {
            result; //False: recognition failed, True: recognition succeeded
            x; distance between UAV and QR code
            y; distance between UAV and QR code
            z; distance between UAV and QR code
            yaw; angle between UAV and QR code
            qr_id: recognized QR code id
            }
        '''	
        return  self._control_server.single_fly_Qrcode_tracking(qr_id, 2, 0)
    
    def single_fly_Proactive_alignment(self, qr_id):
        '''
            Description:
            Front camera QR code alignment
            Parameters:
            qr_id: QR code id [0-9],
            Return:
            result; //False: recognition failed, True: recognition succeeded
        '''
        return self._control_server.single_fly_Qrcode_tracking(qr_id, 3, 0)
    

    # def single_fly_recognition_Qrcode(self, mode, qr_id):
    # 	'''
    # 		Description:
    # 		Optical flow/front camera QR code recognition
    # 		Parameters:
    #         qr_id: QR code id [0-9],
    #         mode:  mode = 0 optical flow recognition, mode = 1 front camera recognition 
    # 		Return:
    # 		{
    # 		result; //False: recognition failed, True: recognition succeeded
    # 		x; distance between UAV and QR code
    # 		y; distance between UAV and QR code
    # 		z; distance between UAV and QR code
    # 		yaw; angle between UAV and QR code
    # 		qr_id; recognized QR code id
    # 		}
    # 	'''
    # 	if mode == 0:
    # 		return self._control_server.single_fly_Qrcode_align(2, 0, 0, qr_id)
    # 	return self._control_server.single_fly_Qrcode_tracking(qr_id, 2, 0)
    
    def single_fly_track_Qrcode(self, qr_id, time):
        '''
            Description:
            Track QR code [0-9] for [time] seconds
            Parameters:
            qr_id: QR code id
            time: tracking time
            Return:
            result: 0: failure, 1: success

        '''

        return self._control_server.single_fly_Qrcode_tracking(qr_id, 1, time)
    
    def single_fly_getColor(self, Mode = 1):
        '''
            Description:
            Color recognition, get color of current video frame
            Parameters:
            Mode: 1 to start, process one frame
            Return:
            r,g,b: color
            state: 0 fail, 1 success

        '''
        return self._control_server.single_fly_getColor(Mode)
    # Light
    def	single_fly_lamplight(self, r, g, b, time, mode):
        '''
            Description:
            Set light color and mode
            
            Parameters:
            r,g,b: color
            time: light duration/s
            mode: 1/steady, 2/off, 4/RGB cycle, 16/rainbow, 32/blink, 64/breathing
            Return:
            True: success
            False: failure

        '''
        return	self._control_server.single_fly_lamplight( r, g, b, time, mode)
    
    #8. Linux business control commands
    def Plane_fly_line_walking(self):
        
        return self._control_server.Plane_Linux_cmd(7, 1, type, 0, 0)
    
    def plane_fly_generating(self, type, data ,reserve):
        '''
            Description:
            Fire laser
            Parameters:
            type = 0;  // Laser: 0-single shot, 1-burst, 2-enable laser receive, 3-disable laser receive, 4-continuous burst, 5-disable firing 
            data = 10; // Burst frequency, times/sec, range 1-14
            reserve = 100 //Ammo, range 1-255   
        '''
        return self._control_server.Plane_Linux_cmd(7 ,1 , type, data, reserve)
    
    def plane_fly_laser_receiving(self):
        '''
            Description:
            Laser receiver hit detection
            Return:
            True: hit
            False: not hit
        '''
        return self._control_server.get_laser_receiving()
    
    def Plane_cmd_switch_QR(self, type):
        '''
            Description:
            Enable/disable QR code positioning
            Parameters:
            type: 0-enable, 1-disable
        
            
        '''
        return self._control_server.Plane_Linux_cmd(10 ,1 ,type ,0 ,0)
    def Plane_fly_take_photo(self):
        '''
            Description:
            Take photo, must be called after video stream is enabled
            Parameters:
        '''
        return self._control_server.Plane_Linux_cmd(5 ,1 ,0 ,1 ,0)
    def Plane_cmd_swith_rtp(self,type):
        '''
            Description:
            Enable video stream
            Parameters:
            type: 0-enable, 1-disable
        '''
        return self._control_server.Plane_Linux_cmd(9, 1, type, 0, 0)
    
    def get_image_array(self):
        '''
            Description:
               Get current frame array from video stream
            Parameters:
            return: numpy.ndarray or None
        '''
        return self._control_server.get_Image_array()
    def Plane_cmd_electromagnet(self, type):
        
        '''
            Description:
            External electromagnet
            Parameters:
            type: 2-adsorb, 3-release
        '''
        return self._control_server.Plane_Linux_cmd(26, 1, type, 0, 0)
    
    def Plane_cmd_clamp(self, type, angle = 0):
        '''
            Description:
            External clamp, electromagnet
            Parameters:
            type: 0: clamp close, 1: clamp open, 2: clamp angle, 3: electromagnet adsorb, 4: electromagnet release
            angle: clamp rotation angle 0-180

        '''
        return self._control_server.Plane_Linux_cmd(26, 1, type, angle, 0)

    
    def Plane_cmd_switch_video(self, type = 0):	
        '''
            Description:
            Start recording
            Parameters:
            type: // recording, 0-start, 1-stop

        '''
        return self._control_server.Plane_Linux_cmd(6, 0, type, 0, 0)
    
    def single_fly_flip_rtp(self):
        '''
            Description:
            Open video stream (must enable video stream first)
            Parameters:
        '''
        self._control_server.single_fly_flip_rtp()

    def Plane_cmd_camera_angle(self, type, data):
        '''
            Description:
            Set main camera pitch angle
            Parameters:
            type = 0;  // Direction: 0-up, 1-down (absolute), 2/3 algorithm control, 4-calibrate, 5-block up, 6-block down (relative)
            data = 30; // Angle: 0~90
        '''
        return self._control_server.Plane_Linux_cmd(8, 1, type, data, 0)

#=================================================Plane Control===================================================================#

    def plane_fly_arm(self):
        '''
            Description:
            Spin propellers at low speed
            Parameters:
        '''
        return self._control_server.plane_fly_arm()

    def plane_fly_disarm(self):
        '''
            Description:
            Stop spinning propellers at low speed
            Parameters:
        '''
        return self._control_server.plane_fly_disarm()

	
    def Plane_getBarrier(self):
        '''
            Description:
            Get obstacle avoidance information
            Parameters:
            
            Return: dict, obstacle status for each direction, True: obstacle present, False: no obstacle
            {
            'forward': True,
            'back': True,
            'left': True,
            'right': True
            }
        '''
        return self._control_server.Plane_getBarrier()

    def get_battery(self):
        '''
            Description:
            Get UAV battery percentage
            Parameters:
            plane_id: UAV ID
            Return:
            Integer: battery percentage
        '''
        return self._control_server.get_battery()

    def get_coordinate(self):
        '''
            Description:
            Get UAV coordinates (x, y, z)
            Parameters:
            Return:
            [x, y, z]
        '''
        return self._control_server.get_coordinate()

    def get_yaw(self):
        '''
            Description:
            Get UAV angles (degrees)
            Parameters:
            Return:
            Integer: [yaw, pitch, roll]
        '''
        return self._control_server.get_yaw()

    def get_accelerated_speed(self):
        '''
            Description:
            Get UAV acceleration (X, Y, Z axes)
            Return:
            Integer: [X, Y, Z]
        '''
        return self._control_server.get_accelerated_speed()

    def get_plane_speed(self):
        '''
            Description:
            Get UAV body speed (X, Y, Z axes)
            Return:
            Integer: [X, Y, Z]
        '''
        return self._control_server.get_plane_speed()

    def get_plane_distance(self):
        '''
            Description:
            Get UAV Tof height
            Return:
            Integer: UAV Tof height
        '''
        return self._control_server.get_plane_distance()

    def get_plane_id(self):
        '''
            Description:
            Get UAV ID
            Return:
            Integer: UAV ID
        '''
        return self._control_server.get_plane_id()


################################################